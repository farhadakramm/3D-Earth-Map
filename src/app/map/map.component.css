/* Host selector styles the component itself. The styles apply to the outermost element of the component (or the custom element in case of Web Components). */
:host {
  display: block; /* Ensures the host element behaves like a block-level element (occupying full width available). */
  width: 100%; /* Sets the width of the host to be 100% of the parent container. */
  height: 100%; /* Sets the height of the host to be 100% of the parent container. */
}

/* Styles for the map container element. */
.map-container {
  width: 100%; /* Ensures the map container takes up 100% of the available width. */
  height: 100%; /* Ensures the map container takes up 100% of the available height. */
}

/* Styles for the globe container, which holds the 3D globe and ensures it fills the entire screen. */
.globe-container {
  position: relative; /* Positions the globe container relative to its parent, allowing absolute positioning of child elements inside it. */
  width: 100%; /* Ensures the globe container takes up 100% of the available width. */
  height: 100vh; /* Sets the height to 100% of the viewport height (the full screen height). */
  display: flex; /* Uses flexbox layout for aligning children (the canvas in this case). */
  justify-content: center; /* Centers the child (the canvas) horizontally inside the globe container. */
  align-items: center; /* Centers the child (the canvas) vertically inside the globe container. */
}

/* Styles for the canvas element. */
canvas {
  width: 100%; /* Ensures the canvas element stretches to 100% of the available width inside its container. */
  height: 100%; /* Ensures the canvas element stretches to 100% of the available height inside its container. */
}

/* Styles for the specific #globeCanvas element. */
#globeCanvas {
  position: absolute; /* Positions the canvas absolutely inside the globe container, allowing it to be placed at specific coordinates. */
  top: 0; /* Places the top edge of the canvas at the top of the parent container. */
  left: 0; /* Places the left edge of the canvas at the left of the parent container. */
  width: 100%; /* Ensures the canvas takes up 100% of the width of the globe container. */
  height: 100%; /* Ensures the canvas takes up 100% of the height of the globe container. */
  display: block; /* Ensures the canvas is displayed as a block-level element (removes any extra space below it). */
}

/* Styles for the Cesium container element */
.cesium-container {
  width: 100vw; /* Sets the width to 100% of the viewport width. */
  height: 100vh; /* Sets the height to 100% of the viewport height. */
  position: fixed; /* Fixes the position of the container relative to the viewport, so it remains in place even when scrolling. */
  top: 0; /* Positions the container at the top of the viewport. */
  left: 0; /* Positions the container at the left of the viewport. */
}

/* Styles for the loading indicator shown while Cesium is loading */
.loading-indicator {
  position: fixed; /* Fixes the position of the loading indicator to the viewport, so it remains in place during scrolling. */
  top: 50%; /* Positions the loading indicator vertically at the center of the viewport. */
  left: 50%; /* Positions the loading indicator horizontally at the center of the viewport. */
  transform: translate(-50%, -50%); /* Offsets the element by -50% of its width and height to truly center it. */
  font-size: 1.5rem; /* Sets the font size to 1.5 rem units (relative to the root font size). */
  color: white; /* Sets the text color of the loading indicator to white. */
  background-color: rgba(0, 0, 0, 0.7); /* Sets the background color to black with 70% opacity for a semi-transparent effect. */
  padding: 1rem; /* Adds 1 rem of padding inside the loading indicator to give some space around the text. */
  border-radius: 0.5rem; /* Rounds the corners of the loading indicator with a 0.5rem radius. */
}
